================================================================================
                          FOODDB API DOCUMENTATION
                         Complete Integration Guide
================================================================================

üåê BASE URL
-----------
Production: https://themealdb-inky.vercel.app/api
Local Dev:  http://localhost:3000/api

üîë API KEYS
-----------
API Key:     1
             - Completely FREE for all users
             - Rate limit: 100 requests per 15 minutes
             - Access to ALL endpoints and features
             - No premium restrictions
             - Multiple ingredient filtering included
             - Latest recipes endpoint included
             - Random selection with custom count included
             - CRUD operations included

üì° AUTHENTICATION
-----------------
All requests require an API key as a query parameter:
?key=YOUR_API_KEY

Example:
https://themealdb-inky.vercel.app/api/v1/search.php?key=1&s=chicken

================================================================================
                              API ENDPOINTS
================================================================================

üîç SEARCH & LOOKUP ENDPOINTS
----------------------------

1. Search by Name
   GET /api/v1/search.php?key={API_KEY}&s={SEARCH_TERM}
   
   Example:
   GET /api/v1/search.php?key=1&s=chicken
   
   Response:
   {
     "meals": [
       {
         "idMeal": "52977",
         "strMeal": "Chicken Parmesan",
         "strMealThumb": "https://firebasestorage.googleapis.com/...",
         "strCategory": "Chicken",
         "strArea": "Italian",
         "strInstructions": "Step by step instructions...",
         "strIngredient1": "Chicken",
         "strMeasure1": "2 lbs",
         ...
       }
     ]
   }

2. Search by First Letter
   GET /api/v1/search.php?key={API_KEY}&f={LETTER}
   
   Example:
   GET /api/v1/search.php?key=1&f=c
   
   Note: Letter must be a single character

3. Lookup Recipe by ID
   GET /api/v1/lookup.php?key={API_KEY}&i={MEAL_ID}
   
   Example:
   GET /api/v1/lookup.php?key=1&i=52977

4. Random Recipe
   GET /api/v1/random.php?key={API_KEY}
   
   Example:
   GET /api/v1/random.php?key=1

üè∑Ô∏è CATEGORIES & LISTS
---------------------

5. Get All Categories (with images and descriptions)
   GET /api/v1/categories.php?key={API_KEY}
   
   Example:
   GET /api/v1/categories.php?key=1

6. List Category Names Only
   GET /api/v1/list.php?key={API_KEY}&c=list
   
   Example:
   GET /api/v1/list.php?key=1&c=list

7. List Areas/Countries
   GET /api/v1/list.php?key={API_KEY}&a=list
   
   Example:
   GET /api/v1/list.php?key=1&a=list

8. List Ingredients
   GET /api/v1/list.php?key={API_KEY}&i=list
   
   Example:
   GET /api/v1/list.php?key=1&i=list

üîΩ FILTER ENDPOINTS
-------------------

9. Filter by Category
   GET /api/v1/filter.php?key={API_KEY}&c={CATEGORY}
   
   Example:
   GET /api/v1/filter.php?key=1&c=Chicken

10. Filter by Area/Country
    GET /api/v1/filter.php?key={API_KEY}&a={AREA}
    
    Example:
    GET /api/v1/filter.php?key=1&a=Italian

11. Filter by Single Ingredient
    GET /api/v1/filter.php?key={API_KEY}&i={INGREDIENT}
    
    Example:
    GET /api/v1/filter.php?key=1&i=chicken

12. Filter by Multiple Ingredients (FREE)
    GET /api/v1/filter.php?key=1&i={INGREDIENT1,INGREDIENT2,INGREDIENT3}
    
    Example:
    GET /api/v1/filter.php?key=1&i=chicken,garlic,onion

üî• ADVANCED ENDPOINTS (ALL FREE)
--------------------------------

13. Random Selection with Custom Count (FREE)
    GET /api/v1/randomselection.php?key=1&count={NUMBER}
    
    Example:
    GET /api/v1/randomselection.php?key=1&count=10
    
    Parameters:
    - count: Number of random recipes (max 50)

14. Latest Recipes (FREE)
    GET /api/v1/latest.php?key=1&limit={NUMBER}
    
    Example:
    GET /api/v1/latest.php?key=1&limit=20
    
    Parameters:
    - limit: Number of latest recipes (max 100)

üñºÔ∏è IMAGE ENDPOINTS
------------------

15. Get Image Information
    GET /api/images/{TYPE}/{ID}
    
    Examples:
    GET /api/images/meals/52977
    GET /api/images/categories
    GET /api/images/ingredients
    
    Types:
    - meals: Recipe images
    - categories: Category images
    - ingredients: Ingredient images

üìù CRUD ENDPOINTS (ALL FREE)
----------------------------

16. Create New Recipe (FREE)
    POST /api/v1/meals?key=1
    
    Headers:
    Content-Type: application/json
    
    Body:
    {
      "strMeal": "Recipe Name",
      "strCategory": "Category",
      "strArea": "Country",
      "strInstructions": "Step by step instructions...",
      "strIngredient1": "Ingredient 1",
      "strMeasure1": "1 cup",
      ...
    }

17. Update Recipe (FREE)
    PUT /api/v1/meals/{MEAL_ID}?key=1

18. Delete Recipe (FREE)
    DELETE /api/v1/meals/{MEAL_ID}?key=1

================================================================================
                            RESPONSE FORMAT
================================================================================

üéØ STANDARD RESPONSE STRUCTURE
------------------------------
All successful responses follow this format:

{
  "meals": [
    {
      "idMeal": "52977",
      "strMeal": "Recipe Name",
      "strDrinkAlternate": null,
      "strCategory": "Category",
      "strArea": "Country/Region",
      "strInstructions": "Detailed cooking instructions...",
      "strMealThumb": "https://firebasestorage.googleapis.com/v0/b/fooddb-d274c.appspot.com/o/meals%2F...",
      "strTags": "tag1,tag2,tag3",
      "strYoutube": "https://www.youtube.com/watch?v=...",
      "strIngredient1": "First ingredient",
      "strIngredient2": "Second ingredient",
      "strIngredient3": "Third ingredient",
      ...
      "strIngredient20": "Last ingredient",
      "strMeasure1": "1 cup",
      "strMeasure2": "2 tbsp",
      "strMeasure3": "1 tsp",
      ...
      "strMeasure20": "To taste",
      "strSource": "https://source-website.com",
      "strImageSource": null,
      "strCreativeCommonsConfirmed": null,
      "dateModified": "2024-09-17T03:39:03.000Z"
    }
  ]
}

üìä CATEGORIES RESPONSE
---------------------
{
  "categories": [
    {
      "idCategory": "1",
      "strCategory": "Beef",
      "strCategoryThumb": "https://firebasestorage.googleapis.com/...",
      "strCategoryDescription": "Beef is the culinary name for meat from cattle..."
    }
  ]
}

üìã LISTS RESPONSE
----------------
{
  "meals": [
    {
      "strCategory": "Beef"
    },
    {
      "strCategory": "Chicken"
    }
  ]
}

================================================================================
                              ERROR HANDLING
================================================================================

üö® HTTP STATUS CODES
--------------------
200 - Success
400 - Bad Request (missing parameters)
401 - Unauthorized (invalid or missing API key)
403 - Forbidden (premium feature with test key)
404 - Not Found
429 - Too Many Requests (rate limited)
500 - Internal Server Error

üìã ERROR RESPONSE FORMAT
-----------------------
{
  "error": "Error Type",
  "message": "Detailed error description"
}

üîß COMMON ERRORS
---------------
Missing API Key:
{
  "error": "API key required",
  "message": "Please provide an API key. Use \"1\" for testing."
}

Invalid API Key:
{
  "error": "Invalid API key",
  "message": "The provided API key is not valid."
}

All Features Now Free:
{
  "success": true,
  "message": "All API features are now completely free with any valid API key!"
}

Rate Limit Exceeded:
{
  "error": "Rate Limit Exceeded",
  "message": "Too many requests. Please wait before making more requests."
}

================================================================================
                              MOBILE APP INTEGRATION
================================================================================

üçé iOS SWIFT EXAMPLE
--------------------
```swift
import Foundation

class FoodDBAPI {
    private let baseURL = "https://themealdb-inky.vercel.app/api/v1"
    private let apiKey: String
    
    init(apiKey: String = "1") {
        self.apiKey = apiKey
    }
    
    func fetchRandomRecipe(completion: @escaping (Result<Data, Error>) -> Void) {
        guard let url = URL(string: "\(baseURL)/random.php?key=\(apiKey)") else {
            completion(.failure(URLError(.badURL)))
            return
        }
        
        var request = URLRequest(url: url)
        request.setValue("FoodApp/1.0", forHTTPHeaderField: "User-Agent")
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        request.setValue("XMLHttpRequest", forHTTPHeaderField: "X-Requested-With")
        request.setValue("no-cache", forHTTPHeaderField: "Cache-Control")
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }
            
            guard let data = data else {
                completion(.failure(URLError(.badServerResponse)))
                return
            }
            
            completion(.success(data))
        }.resume()
    }
}
```

ü§ñ ANDROID KOTLIN EXAMPLE
-------------------------
```kotlin
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.Response
import java.io.IOException

class FoodDBAPI(private val apiKey: String = "1") {
    private val baseURL = "https://themealdb-inky.vercel.app/api/v1"
    private val client = OkHttpClient()
    
    fun fetchRandomRecipe(): Response {
        val request = Request.Builder()
            .url("$baseURL/random.php?key=$apiKey")
            .addHeader("User-Agent", "FoodApp/1.0")
            .addHeader("Accept", "application/json")
            .addHeader("X-Requested-With", "XMLHttpRequest")
            .addHeader("Cache-Control", "no-cache")
            .build()
            
        return client.newCall(request).execute()
    }
}
```

üì± IMPORTANT FOR MOBILE APPS
----------------------------
To avoid being blocked by Vercel's Security Checkpoint, your mobile app MUST include these headers:

REQUIRED HEADERS:
- User-Agent: "YourAppName/1.0" (replace with your app name)
- Accept: "application/json"
- X-Requested-With: "XMLHttpRequest"

RECOMMENDED HEADERS:
- Cache-Control: "no-cache" (for fresh data)
- Connection: "keep-alive" (for better performance)

WITHOUT these headers, your requests will be cancelled with error code -999.

================================================================================
                              CODE EXAMPLES
================================================================================

üü® JAVASCRIPT/FETCH
-------------------
// Basic search
fetch('https://themealdb-inky.vercel.app/api/v1/search.php?key=1&s=chicken', {
  headers: {
    'User-Agent': 'FoodApp/1.0',
    'Accept': 'application/json',
    'X-Requested-With': 'XMLHttpRequest'
  }
})
  .then(response => response.json())
  .then(data => console.log(data.meals));

// Random recipe
fetch('https://themealdb-inky.vercel.app/api/v1/random.php?key=1', {
  headers: {
    'User-Agent': 'FoodApp/1.0',
    'Accept': 'application/json'
  }
})
  .then(response => response.json())
  .then(data => console.log(data.meals[0]));

// Get categories
fetch('https://themealdb-inky.vercel.app/api/v1/categories.php?key=1', {
  headers: {
    'User-Agent': 'FoodApp/1.0',
    'Accept': 'application/json'
  }
})
  .then(response => response.json())
  .then(data => console.log(data.categories));

üü¶ JAVASCRIPT CLASS
------------------
class FoodDBAPI {
  constructor(apiKey = '1') {
    this.baseURL = 'https://themealdb-inky.vercel.app/api/v1';
    this.apiKey = apiKey;
  }

  async request(endpoint, params = {}) {
    const url = new URL(`${this.baseURL}${endpoint}`);
    url.searchParams.append('key', this.apiKey);
    
    Object.entries(params).forEach(([key, value]) => {
      if (value) url.searchParams.append(key, value);
    });

    const response = await fetch(url, {
      headers: {
        'User-Agent': 'FoodApp/1.0',
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    if (!response.ok) {
      throw new Error(`API Error: ${response.statusText}`);
    }
    return response.json();
  }

  async searchByName(query) {
    return this.request('/search.php', { s: query });
  }

  async getRandomRecipe() {
    return this.request('/random.php');
  }

  async getRecipeById(id) {
    return this.request('/lookup.php', { i: id });
  }

  async getCategories() {
    return this.request('/categories.php');
  }

  async filterByCategory(category) {
    return this.request('/filter.php', { c: category });
  }
}

// Usage
const api = new FoodDBAPI('1');
api.searchByName('chicken').then(data => console.log(data.meals));

üü© PYTHON
---------
import requests

class FoodDBAPI:
    def __init__(self, api_key='1'):
        self.base_url = 'https://themealdb-inky.vercel.app/api/v1'
        self.api_key = api_key
    
    def request(self, endpoint, params=None):
        if params is None:
            params = {}
        params['key'] = self.api_key
        
        response = requests.get(f"{self.base_url}{endpoint}", params=params)
        response.raise_for_status()
        return response.json()
    
    def search_by_name(self, query):
        return self.request('/search.php', {'s': query})
    
    def get_random_recipe(self):
        return self.request('/random.php')

# Usage
api = FoodDBAPI('1')
recipes = api.search_by_name('chicken')
print(recipes)

üü™ CURL
-------
# Search recipes
curl "https://themealdb-inky.vercel.app/api/v1/search.php?key=1&s=chicken"

# Get random recipe
curl "https://themealdb-inky.vercel.app/api/v1/random.php?key=1"

# Get categories
curl "https://themealdb-inky.vercel.app/api/v1/categories.php?key=1"

# Filter by category
curl "https://themealdb-inky.vercel.app/api/v1/filter.php?key=1&c=Chicken"

================================================================================
                              RATE LIMITING
================================================================================

üìä RATE LIMITS
--------------
Test Key (1):
- 100 requests per 15 minutes
- Basic endpoints only

Premium Key:
- Higher limits (contact for specific limits)
- All endpoints including premium features

üîÑ RATE LIMIT HEADERS
--------------------
Every response includes rate limit information:
- RateLimit-Limit: Maximum requests allowed
- RateLimit-Remaining: Requests remaining in current window
- RateLimit-Reset: Seconds until rate limit resets

================================================================================
                              PREMIUM FEATURES
================================================================================

üéâ COMPLETELY FREE API
---------------------
All features are now completely FREE for everyone!

‚úÖ FREE FEATURES (NO RESTRICTIONS)
----------------------------------
- All endpoints accessible with key "1"
- Multiple ingredient filtering
- Latest recipes endpoint
- Random selection with custom count
- CRUD operations (create, update, delete recipes)
- Image uploads and management
- AI-powered recipe generation (admin panel)
- No premium keys required
- Same rate limits for all users

================================================================================
                              SUPPORT & CONTACT
================================================================================

üìß SUPPORT
----------
For technical support, premium upgrades, or custom integrations:
- GitHub: https://github.com/ChrolloAce/themealdb
- Issues: Report bugs and feature requests via GitHub Issues

üîß TROUBLESHOOTING
-----------------
1. Invalid API Key: Make sure you're using "1" for testing or your valid premium key
2. Rate Limited: Wait for the rate limit window to reset
3. No Results: Check your search parameters and try different terms
4. 500 Errors: Check the service status or try again later

üìö ADDITIONAL RESOURCES
----------------------
- Firebase Storage: Images are served from Firebase Storage CDN for fast loading
- Image URLs: All recipe images are optimized and cached
- Recipe Data: Includes up to 20 ingredients per recipe with measurements

================================================================================
                              VERSION HISTORY
================================================================================

v1.0.0 - Current Version
- Complete TheMealDB-compatible API
- Firebase Storage integration for images
- AI-powered recipe generation (admin only)
- Premium features for advanced usage
- Rate limiting and API key authentication

================================================================================
                                  END
================================================================================

Last Updated: September 17, 2024
API Version: v1
Base URL: https://themealdb-inky.vercel.app/api

For the most up-to-date documentation, visit:
https://themealdb-inky.vercel.app/

Test your API key immediately:
https://themealdb-inky.vercel.app/api/v1/random.php?key=1

## NEW: Ingredient Image API

### Get All Ingredients
GET /api/json/v1/1/ingredients
Returns a list of all available ingredients with image URLs.

Example Response:
{
  "ingredients": [
    {
      "name": "tomato",
      "displayName": "Tomato", 
      "imageUrl": "/api/json/v1/1/ingredients/tomato/image"
    }
  ],
  "count": 500+
}

### Get Ingredient Image
GET /api/json/v1/1/ingredients/{name}/image
Serves the actual ingredient image file.

Example:
https://themealdb-inky.vercel.app/api/json/v1/1/ingredients/tomato/image

üéØ All AI-generated recipes now use ONLY ingredients that have corresponding images!
