================================================================================
                          FOODDB API DOCUMENTATION
                         Complete Integration Guide
================================================================================

üåê BASE URL
-----------
Production: https://themealdb-inky.vercel.app/api
Local Dev:  http://localhost:3000/api

üîë API KEYS
-----------
API Key:     1
             - Completely FREE for all users
             - Rate limit: 100 requests per 15 minutes
             - Access to ALL endpoints and features
             - No premium restrictions
             - Multiple ingredient filtering included
             - Latest recipes endpoint included
             - Random selection with custom count included
             - CRUD operations included

üì° AUTHENTICATION
-----------------
All requests require an API key as a query parameter:
?key=YOUR_API_KEY

Example:
https://themealdb-inky.vercel.app/api/v1/search.php?key=1&s=chicken

================================================================================
                              API ENDPOINTS
================================================================================

üîç SEARCH & LOOKUP ENDPOINTS
----------------------------

1. Search by Name
   GET /api/v1/search.php?key={API_KEY}&s={SEARCH_TERM}
   
   Example:
   GET /api/v1/search.php?key=1&s=chicken
   
   Response:
   {
     "meals": [
       {
         "idMeal": "52977",
         "strMeal": "Chicken Parmesan",
         "strMealThumb": "https://firebasestorage.googleapis.com/...",
         "strCategory": "Chicken",
         "strArea": "Italian",
         "strInstructions": "Step by step instructions...",
         "strIngredient1": "Chicken",
         "strMeasure1": "2 lbs",
         ...
       }
     ]
   }

2. Search by First Letter
   GET /api/v1/search.php?key={API_KEY}&f={LETTER}
   
   Example:
   GET /api/v1/search.php?key=1&f=c
   
   Note: Letter must be a single character

3. Lookup Recipe by ID
   GET /api/v1/lookup.php?key={API_KEY}&i={MEAL_ID}
   
   Example:
   GET /api/v1/lookup.php?key=1&i=52977

4. Random Recipe (Enhanced with Filtering)
   GET /api/v1/random.php?key={API_KEY}
   GET /api/v1/random.php?key={API_KEY}&{FILTER_PARAMETERS}
   
   Basic Random:
   GET /api/v1/random.php?key=1
   
   Random with Filters (NEW):
   GET /api/v1/random.php?key=1&diet=vegetarian&m=dinner
   GET /api/v1/random.php?key=1&a=Italian&d=main-course
   GET /api/v1/random.php?key=1&c=Chicken&m=lunch
   
   ‚≠ê Now truly random from complete database with advanced algorithm!

üè∑Ô∏è CATEGORIES & LISTS
---------------------

5. Get All Categories (with images and descriptions)
   GET /api/v1/categories.php?key={API_KEY}
   
   Example:
   GET /api/v1/categories.php?key=1

6. List Category Names Only
   GET /api/v1/list.php?key={API_KEY}&c=list
   
   Example:
   GET /api/v1/list.php?key=1&c=list

7. List Areas/Countries
   GET /api/v1/list.php?key={API_KEY}&a=list
   
   Example:
   GET /api/v1/list.php?key=1&a=list

8. List Ingredients
   GET /api/v1/list.php?key={API_KEY}&i=list
   
   Example:
   GET /api/v1/list.php?key=1&i=list

üÜï NEW COMPREHENSIVE LISTING ENDPOINTS
--------------------------------------

9. List Meal Types (NEW)
   GET /api/v1/list.php?key={API_KEY}&m=list
   
   Example:
   GET /api/v1/list.php?key=1&m=list
   
   Returns: Breakfast, Brunch, Lunch, Dinner, Snack, Dessert

10. List Dish Types (NEW)
    GET /api/v1/list.php?key={API_KEY}&d=list
    
    Example:
    GET /api/v1/list.php?key=1&d=list
    
    Returns: Appetizer, Soup, Salad, Main Course, Side Dish, Dessert, Beverage, Snack

11. List Dietary Options (NEW)
    GET /api/v1/list.php?key={API_KEY}&diet=list
    
    Example:
    GET /api/v1/list.php?key=1&diet=list
    
    Returns: Vegetarian, Vegan, Pescatarian, Gluten Free, Dairy Free, Keto, Paleo, Halal, etc.

üîΩ COMPREHENSIVE FILTER ENDPOINTS
---------------------------------

12. Filter by Category
    GET /api/v1/filter.php?key={API_KEY}&c={CATEGORY}
    
    Example:
    GET /api/v1/filter.php?key=1&c=Chicken

13. Filter by Area/Country
    GET /api/v1/filter.php?key={API_KEY}&a={AREA}
    
    Example:
    GET /api/v1/filter.php?key=1&a=Italian

14. Filter by Single Ingredient
    GET /api/v1/filter.php?key={API_KEY}&i={INGREDIENT}
    
    Example:
    GET /api/v1/filter.php?key=1&i=chicken

15. Filter by Multiple Ingredients (FREE)
    GET /api/v1/filter.php?key=1&i={INGREDIENT1,INGREDIENT2,INGREDIENT3}
    
    Example:
    GET /api/v1/filter.php?key=1&i=chicken,garlic,onion

üÜï NEW ADVANCED FILTERING OPTIONS
---------------------------------

16. Filter by Meal Type (NEW)
    GET /api/v1/filter.php?key={API_KEY}&m={MEAL_TYPE}
    
    Examples:
    GET /api/v1/filter.php?key=1&m=breakfast
    GET /api/v1/filter.php?key=1&m=dinner
    GET /api/v1/filter.php?key=1&m=snack
    
    Supported Values: breakfast, brunch, lunch, dinner, snack, dessert

17. Filter by Dish Type (NEW)
    GET /api/v1/filter.php?key={API_KEY}&d={DISH_TYPE}
    
    Examples:
    GET /api/v1/filter.php?key=1&d=appetizer
    GET /api/v1/filter.php?key=1&d=main-course
    GET /api/v1/filter.php?key=1&d=dessert
    
    Supported Values: appetizer, soup, salad, main-course, side-dish, dessert, beverage, snack

18. Filter by Dietary Preference (NEW)
    GET /api/v1/filter.php?key={API_KEY}&diet={DIETARY_PREFERENCE}
    
    Examples:
    GET /api/v1/filter.php?key=1&diet=vegetarian
    GET /api/v1/filter.php?key=1&diet=vegan
    GET /api/v1/filter.php?key=1&diet=keto
    GET /api/v1/filter.php?key=1&diet=gluten-free
    
    Supported Values: vegetarian, vegan, pescatarian, gluten-free, dairy-free, 
    keto, paleo, halal, no-red-meat, no-pork, no-shellfish, omnivore

19. Filter by Contains Ingredients (NEW)
    GET /api/v1/filter.php?key={API_KEY}&contains={INGREDIENT1,INGREDIENT2}
    
    Examples:
    GET /api/v1/filter.php?key=1&contains=chicken,garlic
    GET /api/v1/filter.php?key=1&contains=beef,onions,herbs
    
    Note: Finds recipes that contain ANY of the specified ingredients

üöÄ REVOLUTIONARY COMBINED FILTERING (NEW)
-----------------------------------------

20. Multi-Parameter Filtering - Combine ANY filters in one request!
    GET /api/v1/filter.php?key={API_KEY}&{PARAMETER1}&{PARAMETER2}&{PARAMETER3}...
    
    Power Examples:
    
    # Vegetarian Italian dinner main courses
    GET /api/v1/filter.php?key=1&diet=vegetarian&a=Italian&m=dinner&d=main-course
    
    # Keto breakfast recipes with eggs
    GET /api/v1/filter.php?key=1&diet=keto&m=breakfast&contains=eggs
    
    # Vegan Asian appetizers for lunch
    GET /api/v1/filter.php?key=1&diet=vegan&a=Asian&d=appetizer&m=lunch
    
    # Gluten-free chicken recipes for dinner
    GET /api/v1/filter.php?key=1&diet=gluten-free&c=Chicken&m=dinner
    
    # Italian seafood main courses that are dairy-free
    GET /api/v1/filter.php?key=1&a=Italian&c=Seafood&d=main-course&diet=dairy-free
    
    Combinable Parameters: c, a, i, m, d, diet, contains
    ‚≠ê Unlimited combinations possible!

üî• ADVANCED ENDPOINTS (ALL FREE)
--------------------------------

21. Random Selection with Custom Count (FREE)
    GET /api/v1/randomselection.php?key=1&count={NUMBER}
    
    Example:
    GET /api/v1/randomselection.php?key=1&count=10
    
    Parameters:
    - count: Number of random recipes (max 50)

22. Latest Recipes (FREE)
    GET /api/v1/latest.php?key=1&limit={NUMBER}
    
    Example:
    GET /api/v1/latest.php?key=1&limit=20
    
    Parameters:
    - limit: Number of latest recipes (max 100)

üñºÔ∏è IMAGE ENDPOINTS
------------------

23. Get Image Information
    GET /api/images/{TYPE}/{ID}
    
    Examples:
    GET /api/images/meals/52977
    GET /api/images/categories
    GET /api/images/ingredients
    
    Types:
    - meals: Recipe images
    - categories: Category images
    - ingredients: Ingredient images

üìù CRUD ENDPOINTS (ALL FREE)
----------------------------

24. Create New Recipe (FREE)
    POST /api/v1/meals?key=1
    
    Headers:
    Content-Type: application/json
    
    Body:
    {
      "strMeal": "Recipe Name",
      "strCategory": "Category",
      "strArea": "Country",
      "strInstructions": "Step by step instructions...",
      "strIngredient1": "Ingredient 1",
      "strMeasure1": "1 cup",
      ...
    }

25. Update Recipe (FREE)
    PUT /api/v1/meals/{MEAL_ID}?key=1

26. Delete Recipe (FREE)
    DELETE /api/v1/meals/{MEAL_ID}?key=1

================================================================================
                            RESPONSE FORMAT
================================================================================

üéØ ENHANCED RESPONSE STRUCTURE (NEW)
------------------------------------
All successful responses now include comprehensive recipe data:

{
  "meals": [
    {
      "idMeal": "1758251792484",
      "strMeal": "Asian Ginger Soy Chicken",
      "strDrinkAlternate": null,
      "strCategory": "Main Dish",
      "strArea": "Asian",
      "strDescription": "A flavorful and aromatic Asian chicken dish marinated in ginger, soy sauce, and spices...",
      "strInstructions": "Step 1: Begin by thoroughly washing all fresh produce under cold running water...",
      
      ‚≠ê NEW: Ultra-Detailed Instructions Array (25-40 steps)
      "instructions": [
        "Step 1: Begin by thoroughly washing all fresh produce under cold running water for 30 seconds each, patting completely dry with clean paper towels, and arranging ingredients in order of use on a clean, spacious work surface",
        "Step 2: Preheat your oven to the exact specified temperature, positioning the oven rack in the center position, and allowing a full 15-20 minutes for proper heat distribution throughout the oven cavity",
        "Step 3: Prepare a clean cutting board by wiping with a damp cloth, then completely drying, ensuring it's stable on your counter and won't slip during cutting tasks",
        "...Steps 4-30+: Each step includes temperatures, times, techniques, visual cues, professional tips, and safety measures..."
      ],
      
      "strMealThumb": "https://firebasestorage.googleapis.com/v0/b/fooddb-d274c.appspot.com/o/meals%2F...",
      "strTags": "international,dish,medium,dairyFree,Dinner,30-60-mins,contains-Soy",
      "strYoutube": "",
      "strSource": "AI Generated",
      "strEquipment": "Grill, Mixing Bowl, Tongs",
      
      // Standard ingredient slots (1-20)
      "strIngredient1": "Chicken Breast",
      "strMeasure1": "500g",
      "strIngredient2": "Soy Sauce",
      "strMeasure2": "1/4 cup",
      "strIngredient3": "Fresh Ginger",
      "strMeasure3": "2 tbsp, grated",
      ...
      "strIngredient20": "",
      "strMeasure20": "",
      
      ‚≠ê NEW: Comprehensive Timing & Serving Information
      "prepTime": 15,
      "cookTime": 25,
      "totalTime": 40,
      "numberOfServings": 4,
      "servingSize": "1 serving",
      "difficulty": "Medium",
      "yield": "4 servings",
      
      ‚≠ê NEW: Meal & Dish Classification
      "mealType": ["Dinner"],
      "dishType": "Main Course",
      "mainIngredient": "chicken",
      "occasion": ["Weeknight", "Family Dinner"],
      "seasonality": ["All Season"],
      
      ‚≠ê NEW: Complete Dietary Information
      "dietary": {
        "vegetarian": false,
        "vegan": false,
        "pescatarian": false,
        "glutenFree": false,
        "dairyFree": true,
        "keto": false,
        "paleo": true,
        "halal": true,
        "noRedMeat": false,
        "noPork": true,
        "noShellfish": true,
        "omnivore": true
      },
      
      ‚≠ê NEW: Detailed Nutrition Information
      "nutrition": {
        "caloriesPerServing": 350,
        "protein": "28g",
        "carbs": "12g",
        "fat": "15g",
        "fiber": "4g",
        "sugar": "6g",
        "sodium": "580mg",
        "cholesterol": 55,
        "saturatedFat": 5,
        "vitaminA": 18,
        "vitaminC": 30,
        "iron": 15,
        "calcium": 12
      },
      
      ‚≠ê NEW: Equipment & Skills Required
      "equipmentRequired": ["Large skillet (12-inch)", "Chef's knife (8-inch)", "Cutting board", "Measuring cups", "Mixing bowl", "Tongs"],
      "skillsRequired": ["Chopping", "Saut√©ing", "Seasoning", "Pan-frying", "Timing"],
      "keywords": ["comfort food", "hearty", "flavorful", "easy weeknight", "family-friendly"],
      "allergenFlags": ["soy"],
      "timeCategory": "30-60 mins",
      
      "dateModified": "2025-09-19T03:16:40.466Z",
      "imageCount": 3,
      "images": [...]
    }
  ]
}

üìä CATEGORIES RESPONSE
---------------------
{
  "categories": [
    {
      "idCategory": "1",
      "strCategory": "Beef",
      "strCategoryThumb": "https://firebasestorage.googleapis.com/...",
      "strCategoryDescription": "Beef is the culinary name for meat from cattle..."
    }
  ]
}

üìã STANDARD LISTS RESPONSE
-------------------------
{
  "meals": [
    {
      "strCategory": "Beef"
    },
    {
      "strCategory": "Chicken"
    }
  ]
}

üÜï NEW LISTING RESPONSES
------------------------

Meal Types Response (/list.php?m=list):
{
  "meals": [
    {"strMealType": "Breakfast"},
    {"strMealType": "Brunch"},
    {"strMealType": "Lunch"},
    {"strMealType": "Dinner"},
    {"strMealType": "Snack"},
    {"strMealType": "Dessert"}
  ]
}

Dish Types Response (/list.php?d=list):
{
  "meals": [
    {"strDishType": "Appetizer"},
    {"strDishType": "Soup"},
    {"strDishType": "Salad"},
    {"strDishType": "Main Course"},
    {"strDishType": "Side Dish"},
    {"strDishType": "Dessert"},
    {"strDishType": "Beverage"},
    {"strDishType": "Snack"}
  ]
}

Dietary Options Response (/list.php?diet=list):
{
  "meals": [
    {"strDietary": "Vegetarian"},
    {"strDietary": "Vegan"},
    {"strDietary": "Pescatarian"},
    {"strDietary": "Gluten Free"},
    {"strDietary": "Dairy Free"},
    {"strDietary": "Keto"},
    {"strDietary": "Paleo"},
    {"strDietary": "Halal"},
    {"strDietary": "No Red Meat"},
    {"strDietary": "No Pork"},
    {"strDietary": "No Shellfish"},
    {"strDietary": "Omnivore"}
  ]
}

================================================================================
                              ERROR HANDLING
================================================================================

üö® HTTP STATUS CODES
--------------------
200 - Success
400 - Bad Request (missing parameters)
401 - Unauthorized (invalid or missing API key)
403 - Forbidden (premium feature with test key)
404 - Not Found
429 - Too Many Requests (rate limited)
500 - Internal Server Error

üìã ERROR RESPONSE FORMAT
-----------------------
{
  "error": "Error Type",
  "message": "Detailed error description"
}

üîß COMMON ERRORS
---------------
Missing API Key:
{
  "error": "API key required",
  "message": "Please provide an API key. Use \"1\" for testing."
}

Invalid API Key:
{
  "error": "Invalid API key",
  "message": "The provided API key is not valid."
}

All Features Now Free:
{
  "success": true,
  "message": "All API features are now completely free with any valid API key!"
}

Rate Limit Exceeded:
{
  "error": "Rate Limit Exceeded",
  "message": "Too many requests. Please wait before making more requests."
}

================================================================================
                              MOBILE APP INTEGRATION
================================================================================

üçé iOS SWIFT EXAMPLE
--------------------
```swift
import Foundation

class FoodDBAPI {
    private let baseURL = "https://themealdb-inky.vercel.app/api/v1"
    private let apiKey: String
    
    init(apiKey: String = "1") {
        self.apiKey = apiKey
    }
    
    func fetchRandomRecipe(completion: @escaping (Result<Data, Error>) -> Void) {
        guard let url = URL(string: "\(baseURL)/random.php?key=\(apiKey)") else {
            completion(.failure(URLError(.badURL)))
            return
        }
        
        var request = URLRequest(url: url)
        request.setValue("FoodApp/1.0", forHTTPHeaderField: "User-Agent")
        request.setValue("application/json", forHTTPHeaderField: "Accept")
        request.setValue("XMLHttpRequest", forHTTPHeaderField: "X-Requested-With")
        request.setValue("no-cache", forHTTPHeaderField: "Cache-Control")
        
        URLSession.shared.dataTask(with: request) { data, response, error in
            if let error = error {
                completion(.failure(error))
                return
            }
            
            guard let data = data else {
                completion(.failure(URLError(.badServerResponse)))
                return
            }
            
            completion(.success(data))
        }.resume()
    }
}
```

ü§ñ ANDROID KOTLIN EXAMPLE
-------------------------
```kotlin
import okhttp3.OkHttpClient
import okhttp3.Request
import okhttp3.Response
import java.io.IOException

class FoodDBAPI(private val apiKey: String = "1") {
    private val baseURL = "https://themealdb-inky.vercel.app/api/v1"
    private val client = OkHttpClient()
    
    fun fetchRandomRecipe(): Response {
        val request = Request.Builder()
            .url("$baseURL/random.php?key=$apiKey")
            .addHeader("User-Agent", "FoodApp/1.0")
            .addHeader("Accept", "application/json")
            .addHeader("X-Requested-With", "XMLHttpRequest")
            .addHeader("Cache-Control", "no-cache")
            .build()
            
        return client.newCall(request).execute()
    }
}
```

üì± IMPORTANT FOR MOBILE APPS
----------------------------
To avoid being blocked by Vercel's Security Checkpoint, your mobile app MUST include these headers:

REQUIRED HEADERS:
- User-Agent: "YourAppName/1.0" (replace with your app name)
- Accept: "application/json"
- X-Requested-With: "XMLHttpRequest"

RECOMMENDED HEADERS:
- Cache-Control: "no-cache" (for fresh data)
- Connection: "keep-alive" (for better performance)

WITHOUT these headers, your requests will be cancelled with error code -999.

================================================================================
                              CODE EXAMPLES
================================================================================

üü® JAVASCRIPT/FETCH
-------------------
// Basic search
fetch('https://themealdb-inky.vercel.app/api/v1/search.php?key=1&s=chicken', {
  headers: {
    'User-Agent': 'FoodApp/1.0',
    'Accept': 'application/json',
    'X-Requested-With': 'XMLHttpRequest'
  }
})
  .then(response => response.json())
  .then(data => console.log(data.meals));

// Random recipe
fetch('https://themealdb-inky.vercel.app/api/v1/random.php?key=1', {
  headers: {
    'User-Agent': 'FoodApp/1.0',
    'Accept': 'application/json'
  }
})
  .then(response => response.json())
  .then(data => console.log(data.meals[0]));

// Get categories
fetch('https://themealdb-inky.vercel.app/api/v1/categories.php?key=1', {
  headers: {
    'User-Agent': 'FoodApp/1.0',
    'Accept': 'application/json'
  }
})
  .then(response => response.json())
  .then(data => console.log(data.categories));

üü¶ JAVASCRIPT CLASS
------------------
class FoodDBAPI {
  constructor(apiKey = '1') {
    this.baseURL = 'https://themealdb-inky.vercel.app/api/v1';
    this.apiKey = apiKey;
  }

  async request(endpoint, params = {}) {
    const url = new URL(`${this.baseURL}${endpoint}`);
    url.searchParams.append('key', this.apiKey);
    
    Object.entries(params).forEach(([key, value]) => {
      if (value) url.searchParams.append(key, value);
    });

    const response = await fetch(url, {
      headers: {
        'User-Agent': 'FoodApp/1.0',
        'Accept': 'application/json',
        'X-Requested-With': 'XMLHttpRequest'
      }
    });
    if (!response.ok) {
      throw new Error(`API Error: ${response.statusText}`);
    }
    return response.json();
  }

  async searchByName(query) {
    return this.request('/search.php', { s: query });
  }

  async getRandomRecipe() {
    return this.request('/random.php');
  }

  async getRecipeById(id) {
    return this.request('/lookup.php', { i: id });
  }

  async getCategories() {
    return this.request('/categories.php');
  }

  async filterByCategory(category) {
    return this.request('/filter.php', { c: category });
  }

  // NEW: Advanced filtering methods
  async filterByMealType(mealType) {
    return this.request('/filter.php', { m: mealType });
  }

  async filterByDishType(dishType) {
    return this.request('/filter.php', { d: dishType });
  }

  async filterByDietary(dietary) {
    return this.request('/filter.php', { diet: dietary });
  }

  async getRandomWithFilters(filters) {
    return this.request('/random.php', filters);
  }

  async combinedFilter(filters) {
    return this.request('/filter.php', filters);
  }

  // NEW: Get all listing types
  async getMealTypes() {
    return this.request('/list.php', { m: 'list' });
  }

  async getDishTypes() {
    return this.request('/list.php', { d: 'list' });
  }

  async getDietaryOptions() {
    return this.request('/list.php', { diet: 'list' });
  }
}

// Usage Examples
const api = new FoodDBAPI('1');

// Basic usage
api.searchByName('chicken').then(data => console.log(data.meals));

// NEW: Advanced filtering examples
api.filterByMealType('breakfast').then(data => console.log('Breakfast recipes:', data.meals));
api.filterByDietary('vegetarian').then(data => console.log('Vegetarian recipes:', data.meals));

// NEW: Combined filtering
api.combinedFilter({
  diet: 'vegetarian',
  a: 'Italian', 
  m: 'dinner',
  d: 'main-course'
}).then(data => console.log('Vegetarian Italian dinner main courses:', data.meals));

// NEW: Random with filters
api.getRandomWithFilters({
  diet: 'vegan',
  m: 'lunch'
}).then(data => console.log('Random vegan lunch:', data.meals[0]));

// NEW: Get available options
api.getMealTypes().then(data => console.log('Available meal types:', data.meals));
api.getDietaryOptions().then(data => console.log('Available dietary options:', data.meals));

üü© PYTHON
---------
import requests

class FoodDBAPI:
    def __init__(self, api_key='1'):
        self.base_url = 'https://themealdb-inky.vercel.app/api/v1'
        self.api_key = api_key
    
    def request(self, endpoint, params=None):
        if params is None:
            params = {}
        params['key'] = self.api_key
        
        response = requests.get(f"{self.base_url}{endpoint}", params=params)
        response.raise_for_status()
        return response.json()
    
    def search_by_name(self, query):
        return self.request('/search.php', {'s': query})
    
    def get_random_recipe(self):
        return self.request('/random.php')

# Usage
api = FoodDBAPI('1')
recipes = api.search_by_name('chicken')
print(recipes)

üü™ CURL
-------
# Search recipes
curl "https://themealdb-inky.vercel.app/api/v1/search.php?key=1&s=chicken"

# Get random recipe
curl "https://themealdb-inky.vercel.app/api/v1/random.php?key=1"

# Get categories
curl "https://themealdb-inky.vercel.app/api/v1/categories.php?key=1"

# Filter by category
curl "https://themealdb-inky.vercel.app/api/v1/filter.php?key=1&c=Chicken"

# NEW: Advanced filtering examples
# Filter by meal type
curl "https://themealdb-inky.vercel.app/api/v1/filter.php?key=1&m=breakfast"

# Filter by dish type  
curl "https://themealdb-inky.vercel.app/api/v1/filter.php?key=1&d=main-course"

# Filter by dietary preference
curl "https://themealdb-inky.vercel.app/api/v1/filter.php?key=1&diet=vegetarian"

# NEW: Combined filtering (multiple parameters)
# Vegetarian Italian dinner main courses
curl "https://themealdb-inky.vercel.app/api/v1/filter.php?key=1&diet=vegetarian&a=Italian&m=dinner&d=main-course"

# Keto breakfast recipes containing eggs
curl "https://themealdb-inky.vercel.app/api/v1/filter.php?key=1&diet=keto&m=breakfast&contains=eggs"

# NEW: Random with filters
curl "https://themealdb-inky.vercel.app/api/v1/random.php?key=1&diet=vegan&m=lunch"

# NEW: Get listing endpoints
# List meal types
curl "https://themealdb-inky.vercel.app/api/v1/list.php?key=1&m=list"

# List dish types
curl "https://themealdb-inky.vercel.app/api/v1/list.php?key=1&d=list"

# List dietary options
curl "https://themealdb-inky.vercel.app/api/v1/list.php?key=1&diet=list"

================================================================================
                              RATE LIMITING
================================================================================

üìä RATE LIMITS
--------------
Test Key (1):
- 100 requests per 15 minutes
- Basic endpoints only

Premium Key:
- Higher limits (contact for specific limits)
- All endpoints including premium features

üîÑ RATE LIMIT HEADERS
--------------------
Every response includes rate limit information:
- RateLimit-Limit: Maximum requests allowed
- RateLimit-Remaining: Requests remaining in current window
- RateLimit-Reset: Seconds until rate limit resets

================================================================================
                              PREMIUM FEATURES
================================================================================

üéâ COMPLETELY FREE API
---------------------
All features are now completely FREE for everyone!

‚úÖ FREE FEATURES (NO RESTRICTIONS)
----------------------------------
- All endpoints accessible with key "1"
- Multiple ingredient filtering
- Latest recipes endpoint
- Random selection with custom count
- CRUD operations (create, update, delete recipes)
- Image uploads and management
- AI-powered recipe generation (admin panel)
- No premium keys required
- Same rate limits for all users

================================================================================
                              SUPPORT & CONTACT
================================================================================

üìß SUPPORT
----------
For technical support, premium upgrades, or custom integrations:
- GitHub: https://github.com/ChrolloAce/themealdb
- Issues: Report bugs and feature requests via GitHub Issues

üîß TROUBLESHOOTING
-----------------
1. Invalid API Key: Make sure you're using "1" for testing or your valid premium key
2. Rate Limited: Wait for the rate limit window to reset
3. No Results: Check your search parameters and try different terms
4. 500 Errors: Check the service status or try again later

üìö ADDITIONAL RESOURCES
----------------------
- Firebase Storage: Images are served from Firebase Storage CDN for fast loading
- Image URLs: All recipe images are optimized and cached
- Recipe Data: Includes up to 20 ingredients per recipe with measurements

================================================================================
                              VERSION HISTORY
================================================================================

üöÄ v2.0.0 - MASSIVE EXPANSION (Current Version) - September 19, 2025
-----------------------------------------------------------------------
üÜï REVOLUTIONARY NEW FEATURES:
- Complete meal type filtering (breakfast, brunch, lunch, dinner, snack, dessert)
- Comprehensive dish type filtering (appetizer, soup, salad, main-course, side-dish, dessert, beverage, snack)
- Full dietary preference filtering (12+ options: vegetarian, vegan, keto, paleo, gluten-free, etc.)
- Multi-ingredient contains search with flexible matching
- Revolutionary combined filtering (unlimited parameter combinations)
- Truly random recipe selection with advanced algorithm
- Enhanced random endpoint with filter support
- Ultra-detailed recipe instructions (25-40 professional steps per recipe)
- Complete nutrition and dietary information in responses
- Comprehensive timing, serving, and equipment data
- New listing endpoints: meal types, dish types, dietary options
- 100% backwards compatible with existing API usage

‚ú® ENHANCED RESPONSE DATA:
- Professional chef-level instruction detail with temperatures, times, techniques
- Complete dietary classification and allergen information
- Detailed nutrition facts and serving information
- Equipment requirements and skill levels
- Meal timing and occasion recommendations
- Visual cues, safety tips, and troubleshooting advice

‚ö° TECHNICAL IMPROVEMENTS:
- Advanced Firebase integration for lightning-fast searches
- Intelligent query optimization and caching
- Enhanced error handling and validation
- Comprehensive filtering algorithms
- Performance optimizations for complex searches

v1.0.0 - Initial Release - September 17, 2024
--------------------------------------------
- Complete TheMealDB-compatible API
- Firebase Storage integration for images
- AI-powered recipe generation (admin only)
- Basic filtering and search capabilities
- Rate limiting and API key authentication

================================================================================
                            üåü WHAT'S NEW SUMMARY
================================================================================

üî• YOUR API NOW SUPPORTS:

‚úÖ COMPREHENSIVE SEARCH:
- 6 meal types + 8 dish types + 12 dietary preferences
- Unlimited filter combinations in single requests
- Multi-ingredient flexible matching
- Truly random selection from complete database

‚úÖ ULTRA-DETAILED RECIPES:
- 25-40 professional cooking steps per recipe
- Complete nutrition and dietary classification
- Equipment requirements and timing information
- Chef techniques, visual cues, and safety tips

‚úÖ ADVANCED ENDPOINTS:
- 26 total endpoints (was 18)
- 8 new comprehensive filtering methods
- 3 new listing endpoints for discovering options
- Enhanced random with filter support

‚úÖ DEVELOPER FRIENDLY:
- 100% backwards compatible
- Enhanced response data structure
- Comprehensive documentation with examples
- Multiple programming language examples

================================================================================
                                  END
================================================================================

Last Updated: September 19, 2025
API Version: v2.0.0 (MASSIVE EXPANSION)
Base URL: https://themealdb-inky.vercel.app/api

üéØ MOST COMPREHENSIVE RECIPE API AVAILABLE
Your API now provides the most advanced recipe search and filtering system in the industry!

For the most up-to-date documentation, visit:
https://themealdb-inky.vercel.app/

Test your API key immediately:
https://themealdb-inky.vercel.app/api/v1/random.php?key=1
